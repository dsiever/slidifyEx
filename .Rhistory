foo$lastSoldPerSqFt <- foo$lastSoldPrice/foo$finishedSqFt
foo$assessPerSqFt <- foo$taxAssessment/foo$finishedSqFt
foo$streetName <- gsub("\\d", "", foo$street)
foo$houseLot <- foo$finishedSqFt / foo$lotSizeSqFt
foo$lotHouse <- foo$lotSizeSqFt / foo$finishedSqFt
p <- ggplot(foo, aes(factor(streetName), lastSoldPerSqFt))
p + geom_boxplot()
plot(x = foo$lastSoldPrice, y = foo$lotHouse, main = "Large Lot and Large House")
text(x = foo$lastSoldPrice, y = foo$lotHouse,
labels = paste(round(foo$pxPerSqFt,0),foo$streetName),
pos = 1, offset = 0.5, cex = 0.7)
foo
foo <- foo[foo$lotHouse <= 10,]
plot(x = foo$lotSizeSqFt, y = foo$finishedSqFt, main = "Large Lot and Large House")
text(x = foo$lotSizeSqFt, y = foo$finishedSqFt,
labels = paste(round(foo$pxPerSqFt,0),foo$streetName),
pos = 1, offset = 0.5, cex = 0.7)
provWenLat <- 35.177052
provWenLong <- -80.817854
plot(x = foo$latitude, y = foo$longitude)
text(x = foo$latitude, y = foo$longitude,
labels = paste(round(foo$pxPerSqFt,0),foo$streetName),
pos = 1, offset = 0.5, cex = 0.7)
abline(h = provWenLong)
abline(v = provWenLat)
colnames(foo)
lm(lastSoldPrice~lotHouse, bathrooms, finishedSqFt, data = foo)
summary(lm(lastSoldPrice~lotHouse, bathrooms, finishedSqFt, data = foo))
lm(lastSoldPrice~lotHouse + bathrooms + finishedSqFt, data = foo)
sumamry(lm(lastSoldPrice~lotHouse + bathrooms + finishedSqFt, data = foo))
summry(lm(lastSoldPrice~lotHouse + bathrooms + finishedSqFt, data = foo))
summary(lm(lastSoldPrice~lotHouse + bathrooms + finishedSqFt, data = foo))
step(full, data = foo, direction = "backward")
step(lastSoldPrice, data = foo, direction = "backward")
step('lastSoldPrice', data = foo, direction = "backward")
full = lm(lastSoldPrice~., data = foo)
step(full, data = foo, direction = "backward")
full = lm(lastSoldPrice~., data = foo[-('street'))
step(full, data = foo, direction = "backward")
foo[-('street'))
foo[-('street')])
foo[-('street')]
foo[,-('street')]
foo[,-(foo$street)]
foo[,!(foo$street)]
foo[-'street']
colnames(foo)
temp <- lm(lastSoldPrice ~ bathrooms + finishedSqFt + bedrooms + lotSizeSqFt, data = foo)
summary(temp)
temp <- lm(lastSoldPrice ~ finishedSqFt, data = foo)
summary(temp)
temp <- lm(lastSoldPrice ~ finishedSqFt + bedrooms, data = foo)
summary(temp)
temp <- lm(lastSoldPrice ~ finishedSqFt + bathrooms, data = foo)
summary(temp)
temp <- lm(lastSoldPrice ~ finishedSqFt + bathrooms + lotSizeSqFt, data = foo)
summary(temp
)
plot(temp)
library(AppliedPredictiveModeling)
install.packages("caret")
library(cartet)
library(caret)
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredicitiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
head(adData)
dim(adData)
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex,]
testing <- adData[-trainIndex,]
dim(training)
dim(testing)
adData <- data.frame(predictors)
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex,]
testing <- adData[-trainIndex,]
dim(training)
head(testing)
head(diagnosis)
diagnosis
adData <- data.frame(diagnosis, predictors)
head(adData)
data(concrets)
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 0.75)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
head(training)
str(training)
library(Hmsic)
install.packages("Hmisc")
plot(training$CompressiveStrength)
cutStrength <- cut2(training$CompressiveStrength, g = 4)
library(Hmsic)
library(Hmisc)
cutStrength <- cut2(training$CompressiveStrength, g = 4)
qplot(cutStrength, data = training, fill = cutStrength)
qplot(cutStrength, data = training, fill = age)
head(cutStrength)
head(trainging)
head(training
)
qplot(y= training$CompressiveStrength, x = training$Age, fill = cutStrength)
qplot(y= training$CompressiveStrength, x = training$Age, colour = cutStrength)
foo <- cut2(training)
foo <- cut2(training,g=3)
foo <- cut2(training, g=9)
featurePlot(x=training, plot = "pairs")
featurePlot(x=training, y = training$CompressiveStrength, plot = "pairs")
featurePlot(x=training, y = training$CompressiveStrength, plot = "pairs", colour = colnames(training))
args(featurePlot)
qplot(cutStrength, data = training, fill = cutStrength, geom = "scatter")
qplot(cutStrength, data = training, fill = cutStrength, geom = "boxplot")
args(cut2)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
grid.arrange(byAge,byFlyAsh)
library(gridExtra)
library(Hmisc)
names(training)
summary(training)
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
grid.arrange(byAge,byFlyAsh)
range(training$Superplasticizer)
table(training$Superplasticizer==0)
qplot(Superplasticizer,data=training)
qplot(log(Superplasticizer+1),data=training)
log(1)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .9)
(cumsum(p$sdev) / sum(p$sdev))[8]
#Result here
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
p$rotation[,1:7]
p$rotation[,1:8]
p$rotation[,1:10]
p$rotation[,1:8]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
smTrain <- training[grep('^IL',names(training)),]
dim(smTrain)
head(smTrain)
preProc <- preProcess(x = smTrain, method = "PCA",thresh = 0.9)
preProc <- preProcess(x = smTrain, method = "pca",thresh = 0.9)
str(smTrain)
class(smTrain)
table(is.numeric(smTrain))
smTrain$Eotaxin_3 <- as.numeric(smTrain$Eotaxin_3)
preProc <- preProcess(x = smTrain, method = "pca",thresh = 0.9)
table(is.numeric(smTrain))
tail(str(smTrain))
smTrain <- training[,grep('^IL',names(training))]
preProc <- preProcess(x = smTrain, method = "pca",thresh = 0.9)
dim(preProc)
head(preProc)
smTrain <- training[,grep('^IL',names(training))]
preProc <- preProcess(x = smTrain, method = "pca",thresh = 0.91)
head(preProc)
?preProcess
preProc
smTrain <- training[,grep('^IL',names(training))]
preProc <- preProcess(x = smTrain, method = "pca",thresh = 0.90)
preProc
inTrain <- createDataPartition(adData[,grep("^IL",names(adData)])
inTrain <- createDataPartition(adData[,grep("^IL",names(adData)]))
smTrain <- training[,c('diagnosis',grep('^IL',names(training)))]
colnames(smTrain)
colnames(training)
grep('^IL',names(training))
training[,c("diagnosis",grep('^IL',names(training)))]
c("diagnosis",grep('^IL',names(training), value = TRUE))
smTrain <- training[,c("diagnosis",grep('^IL',names(training), value = TRUE))]
modelFit2 <- train(smTrain$diagnosis~., method = "glm", preProcess = "pca", data = smTrain, thresh = 0.9)
warnings()
modelFit2 <- train(smTrain$diagnosis~., method = "glm", preProcess = "pca", data = smTrain)
modelFit1 <- train(smTrain$diagnosis~., method = "glm", data = smTrain)
confusionMatrix(smTrain$diagnosis, predict(modelFit1, smTrain))
modelFit1 <- train(smTrain$diagnosis~., method = "glm", data = smTrain)
confusionMatrix(smTrain$diagnosis, predict(modelFit1, smTrain))
modelFit1
modelFit2
confusionMatrix(smTrain$diagnosis, predict(modelFit1, testing))
head(training)
head(smTrain)
dim(training)
dim(smTrain)
confusionMatrix(smTrain$diagnosis, predict(modelFit2, testing))
modelFit3 <- train(training$diagnosis~., method = "glm", preProcess = "pca", data = training)
modelFit4 <- train(training$diagnosis~., method = "glm", data = training)
confusionMatrix(training$diagnosis, predict(modelFit2, testing))
confusionMatrix(training$diagnosis, predict(modelFit3, testing))
smTrain <- training[,c("diagnosis",grep('^IL',names(training), value = TRUE))]
preProc <- preProcess(smTrain, method = "pca", thresh = 0.80)
trainPC <- predict(preProc, smTrain)
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
smTest <- testing[,c("diagnosis",grep('^IL',names(training), value = TRUE))]
testPC <- predict(preProc, smTest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)[[1]]
modelFit
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
modelFit
smTest <- testing[,c("diagnosis",grep('^IL',names(training), value = TRUE))]
testPC <- predict(preProc, smTest)
testPC
head(testPC)
str(preProc)
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1$save('fig/n1.html', cdn = TRUE)
getwd()
n1$save('n1.html', cdn = TRUE)
cat('<iframe src = "/n1.html' width 100%, height = 600></iframe>')
cat('<iframe src = "n1.html' width 100%, height = 600></iframe>')
cat('<iframe src = "n1.html" width 100%, height = 600></iframe>')
n1
n1 <- nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1
runApp()
dat <- read.csv("C:/users/Dan/Documents/Family/ht_wt.csv")
head(dat)
dat$Date <- as.Date(dat$Date,"%m/%d/%Y")
head(dat)
dat$DOB <- as.Date(dat$DOB,"%m/%d/%Y")
dat$Days <- dat$Date - dat$DOB
head(dat)
dat$wt <- dat$Weight_Oz/16 + dat$Weight_Lb
head(dat)
dat
plot(dat$Days, dat$wt)
plot(dat$Days, dat$wt, type = 'l')
plot(dat$Days, dat$wt, type = 'l', col = dat$Child)
grid()
require(ggplot2)
str(dat)
g <- ggplot(dat, aes(x=Days, y=wt))
g + geom_line()
g <- ggplot(dat, aes(x=Days, y=wt))
g + geom_line()
g + geom_line(aes = (child))
g + geom_line(aes = (dat$child))
qplot(Days, wt, data=dat, group=Child, geom="line")
g <- ggplot(dat, aes(x=dat$Days, y=dat$wt))
g + geom_line()
plot(dat$Days, dat$wt, type = 'l')
ggplot(dat, aes(Days, wt, group = Child, colour = group)) +
geom_path(alpha = 0.5)
ggplot(dat, aes(Days, wt, group = Child, colour = Child)) +
geom_path(alpha = 0.5)
plot(dat$Days, dat$wt, type = 'l')
head(dat)
plot(dat$Days, dat$wt, type = 'l', col = "rainbow")
plot(dat$Days, dat$wt, type = 'l', col = c("red","blue","black"))
plot(dat$Days, dat$wt, type = 'l')
args(plot)
?plot
plot(dat$Days, dat$wt, type = 'l')
plot(dat$Days, dat$Height, type = 'l')
dev.new()
plot(dat$Days, dat$Height, type = 'l')
str(dat)
ggplot(dat, aes(x=Days, y=Wt)) +
geom_point(shape=1)
ggplot(dat, aes(x=Days, y=wt)) +
geom_point(shape=1)
plot(dat$Days, dat$Height, type = 'l', col = c("red","blue","black"))
xyplot(wt ~ Days | Child, data=dat)
require(lattice)
xyplot(wt ~ Days | Child, data=dat)
xyplot(Height ~ Days | Child, data=dat)
xyplot(Days ~ Days | Child, data=dat)
plot(dat$Days, dat$Height, type = 'l', col = c("red","blue","black"))
plot(dat$Days, dat$Height, type = 'l')
plot(dat$Days, dat$Height, type = 'l')
plot(dat$Days, dat$Wt)
plot(dat$Days, dat$Wt, type ="l")
plot(x=dat$Days, y=dat$Wt, type ="l")
dat <- read.csv("C:/users/Dan/Documents/Family/ht_wt.csv")
dat$Date <- as.Date(dat$Date,"%m/%d/%Y")
dat$DOB <- as.Date(dat$DOB,"%m/%d/%Y")
dat$Days <- dat$Date - dat$DOB
dat$wt <- dat$Weight_Oz/16 + dat$Weight_Lb
head(dat)
plot(dat$Days, dat$wt, typ = 'l')
plot(dat$Days, dat$Height, typ = 'l')
plot(dat$Days, dat$Height, typ = 'l')
dat
dat
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line()
str(dat)
dat$Days <- as.numeric(dat$Date - dat$DOB)
str(dat)
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line()
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child))
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child)) + scale_colour_gradient(low="red")
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child))
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child))
q + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child)) + facet_grid(wt~Height)
q + geom_line(aes(colour = Child), size = 2)
s1 <- ggplot(dat, aes(x=Days, y=Height, group=Child))
s1 + geom_line(aes(colour = Child), size = 2)   + facet_grid(wt~Height)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child)) + facet_grid(wt~Height)
q + geom_line(aes(colour = Child), size = 2)
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child))
q + geom_line(aes(colour = Child), size = 2)
multiplot(p,q, col = 2)
multiplot(p,q, cols = 2)
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p <- p + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child))
q <- q + geom_line(aes(colour = Child), size = 2)
multiplot(p,q, cols = 2)
p <- ggplot(dat, aes(x=Days, y=wt, group=Child))
p <- p + geom_line(aes(colour = Child), size = 2)
q <- ggplot(dat, aes(x=Days, y=Height, group=Child))
q <- q + geom_line(aes(colour = Child), size = 2)
multiplot(p,q, cols = 2)
unique(dat$Child)
min(dat[unique(dat$Child),"wt"])
(dat[unique(dat$Child),"wt"])
cast(Child ~ wt, data = dat)
require(reshape)
cast(Child ~ wt, data = dat)
cast(Child ~ wt, data = dat, drop = FALSE)
cast(wt ~ Child, data = dat, drop = FALSE)
cast(dat, wt ~ Child, drop = FALSE)
?cast
cast(dat, wt~Child)
cast(dat, wt~Child, sum)
cast(dat, wt~Child, Height, sum)
cast(dat, wt~Child,dat$Height, sum)
cast(dat, min(wt)~Child)
tapply(dat$wt, df$Child, min)
tapply(dat$Child, df$wt, min)
data.frame(A=c("a","a","b","b"),value=1:4)
df <- data.frame(A=c("a","a","b","b"),value=1:4)
tapply(df$value, df$A, min)
tapply(dat$wt, dat$Child, min)
tapply(dat$wt, dat$Child, max)
tapply(dat$wt, dat$Child, max, is.na = FALSE)
tapply(dat$wt, dat$Child, max, is.na = TRUE)
tapply(dat$wt, dat$Child, max, na.rm = TRUE)
tapply(dat$wt, dat$Child, min, na.rm = TRUE)
dat2 <- tapply(dat$wt, dat$Child, min, na.rm = TRUE)
str(dat2)
dat2
colnames(dat2)
dat2[1,]
dat2[1]
dat2 <- as.data.frame(dat2)
dat2
dat2$Child <- rownames(dat2)
dat2 <- tapply(dat$wt, dat$Child, min, na.rm = TRUE)
dat2 <- as.data.frame(dat2)
dat2$Child <- rownames(dat2)
dat$wt / dat2[match(dat$Child, dat2$Child)]
dat2 <- tapply(dat$wt, dat$Child, min, na.rm = TRUE)
dat2 <- as.data.frame(dat2)
dat2$Child <- rownames(dat2)
dat2
dat$wt / dat2[match(dat$Child, dat2$dat2)]
dat2[match(dat$Child, dat2$dat2),]
dat2[,match(dat$Child, dat2$dat2)]
dat$Child
dat2$dat2
dat2 <- tapply(dat$wt, dat$Child, min, na.rm = TRUE)
dat2 <- as.data.frame(dat2)
dat2$Child <- rownames(dat2)
dat2
wts <- tapply(dat$wt, dat$Child, min, na.rm = TRUE)
dat2 <- as.data.frame(wts)
dat2$Child <- rownames(dat2)
dats
dat2
dat2[match(dat$Child, dat2$dat2)]
dat2[match(dat$Child, dat2$wt)]
dat2[match(dat$Child, dat2$wt),]
dat2[,match(dat$Child, dat2$wt)]
match(dat$Child, dat2$wt)
dat$Child %in% dat2$Child
dat2[match(dat2$wt, dat2$Child)]
setwd("C:/users/Dan/classes/Data_Science/DataProducts/sample/project/first_deck")
list.files()
3. Use an empty line followed by three dashes to separate slides!
slidify("index.Rmd")
require(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?print
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'slidify', 'index.html', host = 'rpubs')
publish(user="dsiever",repo="slidifyEx")
